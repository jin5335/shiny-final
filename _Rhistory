hi <- paste("Hi", "Jack")
hi
paste(hi,"what's up", sep=", ")
paste("1",1:10,sep="-")
paste("The value of 'pi' is",pi, ", endless!!!!")
noquote(a)
a <- paste("The value of 'pi' is",pi, ", endless!!!!")
noquote(a)
print(a , quote="FALSE")
mtcars
rownames(mtcars)
cars <- rownames(mtcars)
nchar(cars)
which(nchar(cars)==max(nchar(cars)))
cars[which(nchar(cars)==max(nchar(cars)))]
grep("2",cars)
grep("z",cars, value=T)
grep("rd",cars, value=T)
grep("V",cars, value=T)
grep("v",cars, value=T)
grep("v",tolower(cars), value=T)
grep("toyota",tolower(cars), value=T)
grep("TOYOTA",toupper(cars), value=T)
library(stringr)
str_count(cars,"t")
sum(str_count(toupper(cars),"TOYOTA"))
x<-seq(40,120,length=300)
y<-dnorm(x, mean=80, sd=10)
x<-seq(40,120,length=300)
y<-dnorm(x, mean=80, sd=10)
plot(x,y)
plot(x,y,line="l")
plot(x,y,type="l")
plot(x,y,type="l",col="red")
line(x, dnorm(x,mean=80,sd=10))
lines(x, dnorm(x,mean=80,sd=10))
x2 <- seq(65,75,length=200)
ploygon(c(65,x2,75),c(0,y2,0),col="grey")
y2 <- dnorm(x2, mean=80,sd=10)
y2 <- dnorm(x2, mean=80,sd=10)
x2 <- seq(65,75,length=200)
y2 <- dnorm(x2, mean=80,sd=10)
polygon(c(65,x2,75),c(0,y2,0),col="grey")
pnorm(75,mean=80,sd=10)
pnorm(75,mean=80,sd=10) - pnorm(65, mean=80, sd=10)
pnorm(92, mean=80, sd=10, lower.tail=T)
pnorm(92, mean=80, sd=10, lower.tail=F)
1-pnorm(92, mean=80, sd=10)
pnorm(92, mean=80, sd=10, lower.tail=F)
pnorm(68, mean=80, sd=10)
qnorm(0.3, mean=80, sd=10)
qnorm(0.8, mean=80, sd=10)
qnorm(0.8,mean=80, sd=10)
qnorm(0.2, mean=80, sd=10)
strsplit("qeijjfpjgopw3erjepfefe", split="w")
strsplit("how are you?", split=" ")
strsplit("how are you?", split="")
a<-strsplit("how are you?", split="")
a<-strsplit("how are you?", split="")
a
class(a)
class(a)
a[[1]]
paste(a)
paste(a[[1]])
paste(a[[1]],collaspe="")
paste(a[[1]],collospe="")
paste(a[[1]],collapse="")
paste(a[[1]],collapse="")
reversed <- a[[1]][12:1]
reversed
paste(reversed, collapse = "")
reverse_myf <- function(string){
a<-strsplit(string, split="")
reversed <- a[[1]][nchar(string):1]
paste(reversed, collapse="")
}
revsere_myf("how are you?")
revesere_myf("how are you?")
reverse_myf("how are you?")
reverse_myf("how are you?, jack, emily")
reversed <- a[[1]][length(string):1]
reverse_myf <- function(string){
a<-strsplit(string, split="")
reversed <- a[[1]][length(string):1]
paste(reversed, collapse="")
}
reverse_myf("how are you?, jack, emily")
string <- "How are you?"
length(string)
nchar(string)
a <- strsplit("how are you?", spilt=" ")
a <- strsplit("how are you?", split=" ")
reversed <- a[[1]][length(a):1]
paste(reversed, collapse=" ")
reversed <- a[[1]][length(a):1]
a <- strsplit("how are you?", split=" ")
a
length(a)
reversed <- a[[1]][3:1]
paste(reversed, collapse=" ")
length(a[[1]])
rev_word <- function(string){
a<-strsplit(string, spilt=" ")
reversed <- a[[1]][length(a[[1]]):1]
reversed %>% paste(collapse=" ")
}
rev_word("how are you?")
a<-strsplit(string, split=" ")
rev_word <- function(string){
a<-strsplit(string, split=" ")
reversed <- a[[1]][length(a[[1]]):1]
reversed %>% paste(collapse=" ")
}
rev_word("how are you?")
rev_word("how are you?, what are you doing?")
data <- matrix(c(42,30,50,87),nrow=2, byrow=FALSE)
data
data <- matrix(c(42,30,50,87),nrow=2)
data
data <- matrix(c(42,30,50,87),nrow=2, byrow=FALSE)
data
chisq <- function(Obs){
Expected <- outer(rowSums(Obs), colSums(Obs))/sum(Obs)
return(Expected)
}
chisq(data)
x2 <- seq(65,75,length=200)
rs
rs <-rowSums(data)
cs <-colSums(data)
rs
cs
rs <- rowSums(data)
cs <- colSums(data)
rs
outer(rs,cs)
cs
outer(rs,cs)/sum(data)
sum((Obs-Expected)^2/Expected)
chisq <- function(Obs){
Expected <- outer(rowSums(Obs), colSums(Obs))/sum(Obs)
return(sum((Obs-Expected)^2/Expected))
}
chisq(data)
1=pchisq(chisq(data), df=1)
1=pchisq(chisq(data), 1)
1=pchisq(9.132947, 1)
chisq(data)
1=pchisq(9.132947, 1)
pchisq(9.132947,1)
1-pchisq(9.132947,1)
chisq.test(data)
chisq.test(data, correct)
chisq.test(data, correct=F)
chisq.test(data, )
chisq.test(data)
x <- 1:10
y <- x-1
plot(y~x)
dotchart(y~x)
mtcars$mpg
plot(mtcars$mpg)
dotchar(mtcars$mpg)
dotchart(mtcars$mpg)
dotchart(mtcars$mpg, lab=row.names(mtcars))
dotchart(mtcars$mpg, lab=row.names(mtcars), cex=0.6)
dotchart(mtcars$mpg, lab=row.names(mtcars), cex=0.5)
carmpg <- mtcars[order(mtcars$mpg),]
carmpg
carmpg <- mtcars[order(mtcars$mpg)]
carmpg <- mtcars[order(mtcars$mpg),]
carmpg$cyl
as.facter(carmpg$cyl)
carmpg$cyl<-as.factor(carmpg$cyl)
class(carmpg$cyl)
carmpg <- mtcars[order(mtcars$mpg),]
class(carmpg$cyl)
carmpg$cyl<-as.factor(carmpg$cyl)
class(carmpg$cyl)
dotchart(carmpg$mpg, lab=row.names(carmpg), cex=0.7)
carmpg$color[carmpg$cyl==4] <- "blue"
carmpg$color[carmpg$cyl==6] <-"green"
carmpg$color[carmpg$cyl==8] <-"red"
dotchart(carmpg$mpg, lab=row.names(carmpg), cex=0.7, col=carmpg$color)
dotchart(carmpg$mpg, lab=row.names(carmpg), groups=carmpg$cyl, cex=0.7, col=carmpg$color)
dotchart(carmpg$mpg, lab=row.names(carmpg),
groups=carmpg$cyl, cex=0.7, col=carmpg$color,
main="Milage depend on number of cylinder")
dotchart(carmpg$mpg, lab=row.names(carmpg),
groups=carmpg$cyl, cex=0.7, col=carmpg$color,
main="Milage depending on numbers of cylinder")
dotchart(carmpg$mpg, lab=row.names(carmpg),
groups=carmpg$cyl, cex=0.7, col=carmpg$color,
xlab ="Miles Per gallon"
main="Milage depending on numbers of cylinder")
dotchart(carmpg$mpg, lab=row.names(carmpg),
groups=carmpg$cyl, cex=0.7, col=carmpg$color,
xlab ="Miles Per gallon",
main="Milage depending on numbers of cylinder")
class(mtcars)
str(mtcars)
newdata <- mtcars[1:2]
newdata
newdata[newdata$cyl==4,]
which(newdata$cyl==4)
newdata[newdata$cyl==4,]
newdata[which(newdata$cyl==4),]
mpg_4 <- newdata[which(newdata$cyl==6),]
mpg_8 <- newdata[which(newdata$cyl==8),]
mpg_6 <- newdata[which(newdata$cyl==6),]
mpg_4 <- newdata[which(newdata$cyl==4),]
cbind(mean(mpg_4$mpg), mean(mpg_6$mean), mean(mpg_8$mean))
mpg_6 <- newdata[which(newdata$cyl==6),]
mpg_8 <- newdata[which(newdata$cyl==8),]
cbind(mean(mpg_4$mpg), mean(mpg_6$mean), mean(mpg_8$mean))
cbind(mean(mpg_4$mpg), mean(mpg_6$mpg), mean(mpg_8$mpg))
tapply(x, index, ?)
?tapply
tapply(newdata$mpg, newdata$cyl, mean)
tapply(newdata$mpg, newdata$gear, mean)
tapply(mtcars$mpg, mtcars$gear, mean)
tapply(mtcars$mpg, mtcars$gear, quntile)
tapply(mtcars$mpg, mtcars$gear, quantile)
library(ggvis)
install.packages(ggvis)
install.packages(ggivs)
install.packages("ggvis")
library(ggvis)
mtcars
attach(mtcars)
plot(mpg, cyl)
mtcars %>% ggvis( ~mpg, ~wt)
mtcars %>% ggvis( ~mpg, ~wt) %>% layer_lines()
mtcars %>% ggvis( ~mpg, ~wt) %>% layer_smooths()
#install.packages("ggvis")
library(ggvis)
mtcars
attach(mtcars)
plot(mpg, cyl)
mtcars %>% ggvis( ~mpg, ~wt) %>% layer_points() %>% layer_smooths()
mtcars %>% ggvis( ~mpg, ~wt, fill:="red") %>% layer_points() %>% layer_smooths()
mtcars %>% ggvis( ~mpg, ~wt, file=cyl) %>%
layer_points() %>% layer_smooths()
mtcars %>% ggvis( ~mpg, ~wt, file=~cyl) %>%
layer_points() %>% layer_smooths()
mtcars %>% ggvis( ~mpg, ~wt, fill=~cyl) %>%
layer_points() %>% layer_smooths()
mtcars$cyl <- factor(mtcars$cyl)
mtcars %>% ggvis( ~mpg, ~wt, fill=~cyl) %>%
layer_points() %>% layer_smooths()
mtcars %>% ggvis( ~mpg, ~wt, fill=~cyl) %>%
layer_points() %>% layer_smooths() %>%
add_axis("x", title="MPG", values= c(0:35))
mtcars %>% ggvis( ~mpg, ~wt, fill=~cyl) %>%
layer_points() %>% layer_smooths() %>%
add_axis("x", title="MPG", values= c(10:35))
mtcars %>% ggvis( ~mpg, ~wt, fill=~cyl) %>%
layer_points() %>% layer_smooths() %>%
add_axis("x", title="MPG", values= c(10:35)) %>%
add_axis("y", title="WT", subdivide=4)
x <- c(1:10)
y <- x^2-x+10
plot(x,y, type="l")
plot(x,y, type="s")
plot(x,y, type="h", col="blue", pch=1)
plot(x,y, type="h", col="blue", pch=2)
plot(x,y, type="p", col="blue", pch=2)
par(mfrow=c(2,4))
plot(x,y, type="p", col="blue", pch=i)
par(mfrow=c(2,4))
plot(x,y, type="p", col="blue", pch=i)
ar(mfrow=c(2,4))
x <- c(1:10)
y <- x^2-x+10
par(mfrow=c(2,4))
for( i in 1:8){
plot(x,y, type="p", col="blue", pch=i)
}
x <- c(1:10)
y <- x^2-x+10
types = c("p","l","o","b","c","s","S","h")
par(mfrow=c(2,4))
for( i in 1:8){
plot(x,y, type=types[i], col="blue")
}
mtcars()
mtcars
par(mfrow=c(1,1))
aggregate(mtcars$mpg, by=list(mtcars$cyp), mean)
aggregate(mtcars$mpg, by=list(mtcars$cyl), mean)
mean_by_cyl <- function(x){
if(x==4){
mean(mtcars[which(mtcars$cyl==4,)][,1])
}else if(x==6){
mean(mtcars[which(mtcars$cyl==6,)][,1])
}else if(x==8){
mean(mtcars[which(mtcars$cyl==8,)][,1])
}else {
print("Wrong number!!!!!")
}
}
mean_by_cyl(4)
mean(mtcars[which(mtcars$cyl==4,)][,1])
mean_by_cyl <- function(x){
if(x==4){
mean(mtcars[which(mtcars$cyl==4),][,1])
}else if(x==6){
mean(mtcars[which(mtcars$cyl==6),][,1])
}else if(x==8){
mean(mtcars[which(mtcars$cyl==8),][,1])
}else {
print("Wrong number!!!!!")
}
}
mean_by_cyl(4)
mean_by_cyl2 <- function(x){
mean(mtcars[which(mtcars$cyl==x),])
}
mean_by_cyl2(4)
mean_by_cyl2 <- function(x){
mean(mtcars[which(mtcars$cyl==x),][,1])
}
mean_by_cyl2(4)
mean_by_cyl2(7)
rm(list=ls())
getwd()
dat <- read.csv("/Users/jinju/Desktop/데잇걸즈/희경T/데잇걸즈170921/wisc_bc_data.csv",
header=T, row.names=1)
dat
str(dat)
library(stringr)
View(dat)
view(dat)
View(dat)
minmax <- function(x){
z=(x-min(x))/(max(x)-min(x))
return(z)
}
a <- c(1:10)
minmax(a)
apply(dat[,!names(dat) %in% "diagonsis"], 2, sum)
apply(dat[,!names(dat) %in% "diagonsis"], 2, minmax)
NormDat <- apply(dat[,!names(dat) %in% "diagonsis"], 2, minmax)
NormDat <- apply(dat[,!(names(dat) %in% "diagonsis")], 2, minmax)
View(dat)
str(dat)
NormDat <- apply(dat[,!(names(dat) %in% "diagnosis")], 2, minmax)
NormDat
intall.packages("class")
install.packages("class")
library(class)
?knn
set.seed(1234)
sampleIdx <- sample(x=1:nrow(NormDat), size=round(0.8*nrow(NormDat)), replace=FALSE )
TestDat <- NormDat[-sampleIdx,]
Train_x <- TrainDat[,!(names(TrainDat) %in% "diagnosis")]
Train_y <- TrainDat[,names(TrainDat) %in% "diagnosis"]
Test_x <- TestDat[,!names(TestDat) %in% "diagnosis"]
Test_y <- TestDat[,names(TestDat) %in% "diagnosis"]
Test_x <- TestDat[,!names(TestDat) %in% "diagnosis"]
pred_knn <- knn(train=Train_x, test=Test_x, cl=Train_Y, k=21)
Train_x <- TrainDat[,!(names(TrainDat) %in% "diagnosis")]
TrainDat <- NormDat[sampleIdx,]
TestDat <- NormDat[-sampleIdx,]
Train_x <- TrainDat[,!(names(TrainDat) %in% "diagnosis")]
Train_y <- TrainDat[,names(TrainDat) %in% "diagnosis"]
Test_x <- TestDat[,!names(TestDat) %in% "diagnosis"]
Test_y <- TestDat[,names(TestDat) %in% "diagnosis"]
pred_knn <- knn(train=Train_x, test=Test_x, cl=Train_Y, k=21)
pred_knn <- knn(train=Train_x, test=Test_x, cl=Train_y, k=21)
class(NormDat)
?matrix
sampleIdx <- sample(x=1:nrow(NormDat), size=round(0.8*nrow(NormDat)), replace=FALSE )
Train_x <- NormDat[sampleIdx,]
Test_x <- NormDat[-sampleIdx,]
Train_y <- dat[sampleIdx,"diagnosis"]
Test_y <- TestDat[-sampleIdx,"diagnosis"]
Test_y <- dat[-sampleIdx,"diagnosis"]
pred_knn <- knn(train=Train_x, test=Test_x, cl=Train_y, k=21)
pred_knn <- knn(train=Train_x, test=Test_x, cl=Train_y, k=21)
NormDat <- as.data.frame(NormDat)
Train_x <- NormDat[sampleIdx,]
Test_x <- NormDat[-sampleIdx,]
Train_y <- dat[sampleIdx,"diagnosis"]
Test_y <- dat[-sampleIdx,"diagnosis"]
pred_knn <- knn(train=Train_x, test=Test_x, cl=Train_y, k=21)
pred_knn
table(Test_y, pred_knn)
library(gmodels)
?CrossTable
CrossTable(Test_y,pred_knn)
CrossTable(Test_y,pred_knn,prop.chisq=F, prop.c=F, prop.r=F)
ErrorMat <- matrix(ncol=5, nrow=length(Candidate_K))
Candidate_K <- seq(from=1, to=29, by=2)
ErrorMat <- matrix(ncol=5, nrow=length(Candidate_K))
ErrorMat
for( i in 1:5)
foldN <- sample(1:5, size=nrow(Train_x), replace=T)
foldN <- sample(1:5, size=nrow(Train_x), replace=T)
CrossTrain_x <- Train_x[foldN!=i, ]
CrossTest_x <- Train_x[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i,]
CrossTest_x <- Train_y[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i]
CrossTest_x <- Train_y[foldN==i]
dim(CrossTrain_x)
dim(CrossTest_x)
Candidate_K <- seq(from=1, to=29, by=2)
ErrorMat <- matrix(ncol=5, nrow=length(Candidate_K))
foldN <- sample(1:5, size=nrow(Train_x), replace=T)
for( i in 1:5 ){
CrossTrain_x <- Train_x[foldN!=i, ]
CrossTest_x <- Train_x[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i]
CrossTest_y <- Train_y[foldN==i]
for(j in 1:length(1:nrow(Candidate_K))){
pred <- knn(train=CrossTrain_x, test=CrossTest_x, cl=CrossTest_y, k=Candidate_K[j])
tab <- table(CrossTest_y,pred)
ErrorMat[j,i] <- (tab[1,2]+tab[2,1])/sum(tab)
}
}
Candidate_K <- seq(from=1, to=29, by=2)
pred <- knn(train=CrossTrain_x, test=CrossTest_x, cl=CrossTest_y, k=Candidate_Kj])
for( i in 1:5 ){
CrossTrain_x <- Train_x[foldN!=i, ]
CrossTest_x <- Train_x[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i]
CrossTest_y <- Train_y[foldN==i]
for(j in 1:length(1:nrow(Candidate_K))){
pred <- knn(train=CrossTrain_x, test=CrossTest_x, cl=CrossTest_y, k=Candidate_Kj])
tab <- table(CrossTest_y,pred)
ErrorMat[j,i] <- (tab[1,2]+tab[2,1])/sum(tab)
}
}
for( i in 1:5 ){
CrossTrain_x <- Train_x[foldN!=i, ]
CrossTest_x <- Train_x[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i]
CrossTest_y <- Train_y[foldN==i]
for(j in 1:length(1:nrow(Candidate_K))){
pred <- knn(train=CrossTrain_x, test=CrossTest_x, cl=CrossTest_y, k=Candidate_K[j])
tab <- table(CrossTest_y,pred)
ErrorMat[j,i] <- (tab[1,2]+tab[2,1])/sum(tab)
}
}
for( i in 1:5 ){
CrossTrain_x <- Train_x[foldN!=i, ]
CrossTest_x <- Train_x[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i]
CrossTest_y <- Train_y[foldN==i]
for(j in 1:length(Candidate_K)){
pred <- knn(train=CrossTrain_x, test=CrossTest_x, cl=CrossTest_y, k=Candidate_K[j])
tab <- table(CrossTest_y,pred)
ErrorMat[j,i] <- (tab[1,2]+tab[2,1])/sum(tab)
}
}
for( i in 1:5 ){
CrossTrain_x <- Train_x[foldN!=i, ]
CrossTest_x <- Train_x[foldN==i,]
CrossTrain_y <- Train_y[foldN!=i]
CrossTest_y <- Train_y[foldN==i]
for(j in 1:length(Candidate_K)){
pred <- knn(train=CrossTrain_x, test=CrossTest_x, cl=CrossTrain_y, k=Candidate_K[j])
tab <- table(CrossTest_y,pred)
ErrorMat[j,i] <- (tab[1,2]+tab[2,1])/sum(tab)
}
}
ErrorMat
apply(ErrorMat,1,mean)
plot(apply(ErrorMat,1,mean))
mean_error <- apply(ErroMat, 1, mean)
which.min(mean_error)
mean_error <- apply(ErrorMat, 1, mean)
which.min(mean_error)
pred_knn2 <- knn(train=Train_x, test=Test_x, cl=Train_y, k=Candidate_K[which.min(mean_error)])
pred_knn2
table(Test_y,pred_knn2)
install.packages("devtools")
devtools::install_github("iobis/robis")
require(robis)
data <- occuurence("Abra nitida")
data <- occurrence("Abra nitida")
require(leaflet)
pac_data <- occurrence("Gadus macrocephalus")
dim(pac_dat)
dim(pac_data)
str(pac_data)
View(pad_data)
View(pac_data)
data <- occurrence("Gadus morhua")
dim(data)
data <- occurrence("Gadus morhua")
data <- occurrence("Gadus morhua")
dim(data)
str(data)
colnames(pac_data)
colnames(data)
data <- occureence("ㅊhub mackerel")
고등어 <- occureence("Chub mackerel")
고등어 <- occurrence("Chub mackerel")
고등어 <- occurrence("Mackerel")
고등어 <- occurrence("Scomber japonicus")
dim(고등어)
str(고등어)
view(고등어)
View(고등어)
??pac_data
?pac_data
setwd("/Users/jinju/Desktop/데잇걸즈/글로벌데이터톤/Shiny-flow")
library(shiny)
runApp()
