{
    "collab_server" : "",
    "contents" : "var routes = [\n  // Seoul to Osaka\n  [[126.8494665, 37.5652894], [135.4601306, 34.6784656]],\n  // Seoul to Tokyo\n  [[126.8494665, 37.5652894], [139.5703043, 35.6735408]]\n];\n\nvar countries = {};\nvar flowmaps = {};\n\n// Load country boundaries and names\nd3.queue()\n  .defer(d3.json, 'data/countries-50m.topo.json')\n  .defer(d3.tsv, 'data/country-names.tsv')\n  .awaitAll(function(err, data) {\n    // Extract polygons\n    countries = topojson.feature(data[0], data[0].objects.countries);\n\n    // Assign country names to each polygons\n    var idToNameMap = {};\n    var names = data[1];\n    names.forEach(function(name) {\n      idToNameMap[name.id] = name.name;\n    });\n    countries.features.forEach(function(feature) {\n      feature.name = idToNameMap[feature.id];\n    });\n  });\n\n// Define R shiny custom output binding\nvar flowmapBinding = {\n  find: function(scope) {\n    return $(scope).find('.flowmap-output');\n  },\n  getId: function(el) {\n    var id = el.getAttribute('id');\n    return id;\n  },\n  showProgress: function(el, complete) {\n  },\n  onValueChange: function(el, data) {\n    var map;\n\n    // first-time rendering\n    d3.select(el).selectAll('div.flowmap-container').data([0]).enter()\n      .append('div')\n      .attr('class', 'flowmap-container')\n      .style('height', '100%')\n      .each(function() {\n        // Initialize leaflet\n        var map = L.map(this);\n        L.tileLayer('//cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', {\n          maxZoom: 18,\n          attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>'\n        }).addTo(map);\n        map.setView([37.5728438, 126.9746921], 5);\n        \n        // Initialize D3 custom layer\n        function projectPoint(x, y) {\n          var point = map.latLngToLayerPoint(new L.LatLng(y, x));\n          this.stream.point(point.x, point.y);\n        }\n        var transform = d3.geoTransform({point: projectPoint});\n        var path = d3.geoPath().projection(transform);\n\n        var svg = d3.select(map.getPanes().overlayPane).append(\"svg\");\n        var g = svg.append(\"g\").attr(\"class\", \"leaflet-zoom-hide\");\n        var gCountries = g.append('g').attr('class', 'countries');\n        var selCountries = gCountries.selectAll(\"path\").data(countries.features).enter()\n          .append(\"path\")\n          .attr('stroke', 'none')\n          .attr('fill', function(feature) {\n            var colors = {\n              'Korea, Republic of': 'rgba(0, 0, 255, 0.3)',\n              'Japan': 'rgba(0, 255, 0, 0.3)'\n            };\n            return colors[feature.name] || 'none';\n          });\n        var gRoutes = g.append('g').attr('class', 'routes');\n\n        // Rerender custom layer\n        function render() {\n          // Set bounding box\n          var bounds = path.bounds(countries);\n          var topLeft = bounds[0];\n          var bottomRight = bounds[1];\n          svg\n            .attr(\"width\", bottomRight[0] - topLeft[0])\n            .attr(\"height\", bottomRight[1] - topLeft[1])\n            .style(\"left\", topLeft[0] + \"px\")\n            .style(\"top\", topLeft[1] + \"px\");\n          g\n            .attr(\"transform\", \"translate(\" + -topLeft[0] + \",\" + -topLeft[1] + \")\");\n\n          // Update countries\n          selCountries\n            .attr(\"d\", path);\n\n          // Update routes\n          function toArc(l) {\n            var p0 = l[0];\n            var p2 = l[1];\n            var p1 = [(p0[0] + p2[0]) * 0.5, (p0[1] + p2[1]) * 0.5];\n            var dist = Math.sqrt(Math.pow(p0[0] - p2[0], 2) + Math.pow(p0[1] - p2[1], 2));\n            p1[1] += dist * 0.2;\n            var point = map.latLngToLayerPoint(new L.LatLng(p0[1], p0[0]));\n            return [p0, p1, p2];\n          }\n          var selRoutes = gRoutes.selectAll('path').data(routes.map(toArc));\n          selRoutes.enter()\n            .append('path')\n            .merge(selRoutes)\n            .attr('stroke-linecap', 'round')\n            .attr('stroke', '#888888')\n            .attr('stroke-width', function() {return Math.random() * 5;})\n            .attr('fill', 'none')\n            .attr('d', function(route) {\n              var pixels = route.map(function(r) {\n                return map.latLngToLayerPoint(new L.LatLng(r[1], r[0]));\n              });\n              var line = d3.line()\n                .x(function(d) {return d.x;})\n                .y(function(d) {return d.y;})\n                .curve(d3.curveBundle);\n              return line(pixels);\n            });\n          selRoutes.exit().remove();\n        }\n        map.on('moveend', render);\n        render();\n      });\n  },\n  onValueError: function(el, err) {\n    console.log(['onValueError', el, err]);\n  }\n};\n\nShiny.outputBindings.register(flowmapBinding, \"ak.flowmapBinding\");\n",
    "created" : 1507474329375.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "72079188",
    "id" : "F17BCB4D",
    "lastKnownWriteTime" : 1507523236,
    "last_content_update" : 1507523236032,
    "path" : "~/Projects/shiny-test/www/flowmap.js",
    "project_path" : "www/flowmap.js",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "js"
}